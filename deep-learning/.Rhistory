# Este es un comentario; en R los comentarios empiezan
# a partir del caracter '#'.
# -------------------
# En seguida asignaremos mediante código de R el valor 2014 a una
# variable llamada 'x':
x <- 2014
# Ahora se imprimirá el valor de la variable dos veces, la primera
# vez se hará de manera explícita por medio de la función print(),
# como sigue:
print(x)
## [1] 2014
# ... en seguida se imprimirá de manera implícita, simplemente
# 'tecleándola' en la consola:
x
## [1] 2014
# Finalmente haremos una multiplicación de x por 2
2*x
#AYUDA EN R
help(lm)
# Una forma abreviada sería
?lm # -- comentario
help("[[")
help('if')
help.search("split")
# O abreviadamente:
??"split"
#AYUDA EN BLOGS
help<-stackoverflow-rbloggers
#========NUMEROS REALES=========#
x <- 2 # Se asigna el valor 2 a x
print(x) # Se imprime el valor de x
class(x) # Muestra cuál es la clase de x
x <- 6/2 # Se asigna el valor de la operación dividir 6/2 a x
print(x)
class(x)
#========NUMEROS ENTEROS=========#
x <- as.integer(6/2); print(x) #Convertir la división a entero mediante la funcion
class(x)
#======NUMEROS COMPLEJOS==========#
x <- 21 + 2i
y <- 2i + 21 # El mismo valor que x
z <- -1 + 0i # Corresponde a -1
tt <- sqrt(z) # raíz cuadrada de -1
print(x); print(y); print(z); print(tt)
class(tt)
x <- 1/0 # División por cero
x
## [1] Inf
# Tambien dividir un número por Inf da cero:
y <- 1/Inf
y
## [1] 0
#Finalmente, algunas operaciones pueden resultar en algo que no es un número,
#esto se representa por el valor NaN. Veamos un ejemplo:
x <- 0/0
x
#===============VECTORES========================#
x <- 2 # Se asigna el valor 2 a x
print(x) # Se imprime el valor de x
c(4,2,-8) # Creación de un vector sin asignarlo a una variable
## Distintas formas de asignar un vector a una variable
u <- c(4,2,-8) # Usando el operador <-
c(4, 2, -8) -> v # Usando el operador ->
# Usando la función assign:
assign("w", c(4, 2, -8))
p = c(4, 2, -8) # Usando el operador =
print(u); print(v); print(w); print(p)
#Creación de vectores a partir de archivos de texto - la función scan()
#12 15.5 3.1
#-2.2 0 0.0007
vec <- scan("UnVec.txt")
print(vec)
vec <- scan("IntVec.txt", integer())
print(vec); class(vec) # El vector y su clase
vv <- c(5, 6.6, -7.7)
write(vv, "OtroArchivo.txt")
# Ahora recuperemos el contenido del archivo
v1 <- scan("OtroArchivo.txt")
v1
#========Creación de vectores a partir de secuencias y otros patrones========#
v <- vector("integer", 0)
v # Un vector de enteros sin elementos
w <- vector("numeric", 3)
w # Un vector de tres ceros
u <- vector("logical", 5)
u # Un vector de 5 FALSE
#=========OPERADOR ":" =========#
1:3
v <- 40:13
print(v); class(v) # El vector y su clase
#=========FUNCION seq()========#
#seq() que permite generar una mayor variedad de secuencias numéricas.
v <- seq(from = 5, to = 15, by = 2)
print(v) # secuencia desde 5 hasta 15 de 2 en 2
v <- seq(from = 4, by = 2, length.out = 8)
print(v) # secuencia de 8 números iniciando desde 4 y de 2 en 2
v <- c(4, 8, -3) #Repetir la misma secuencia 5 veces.
w <- rep(v, times = 5)
print(w)
#construir un vector a partir de dos o más vectores ya existentes
u <- c(3, 4, 5)
v <- c(5, 4, 3)
w <- c(u, v)
print(w) # La concatenación de u y v
#Acceso a los elementos individuales de un vector
v <- c(8, 7, -3, 2, 182)
v[5] # El quinto elemento
print(v[1]); print(v[3])
v[4]+v[2] # La suma del cuarto y segundo elementos de v
v[1] <- v[2] - v[5]
v # Note que el resultado de la operación se ha guardado en v[1]
v[8] <- 213
v # v tiene ahora 8 elementos con espacios vacios: NA
#=================================================================#
frutas <- c(15, 100, 2, 30)
frutas
#Supóngase ahora que se quiere asociar esos valores con el nombre de la fruta correspondiente:
names(frutas) <- c("naranja", "pera", "manzana", "durazno")
frutas
frutas <- c(naranja = 15, pera = 100, manzana = 2, durazno = 30)
frutas["durazno"]
frutas["manzana"] <- 8
frutas
frutas[2]
#==============OPERACIONES SENCILLAS CON VECTORES=====================#
v <- 2 + 3 ; v # Resulta en un vector de longitud 1
v <- c(2, 3) - c(5, 1) ;v# Resulta en un vector de longitud 2
v <- c(2, 3, 4) * c(2, 1, 3) ;v # Resulta en un vector de longitud 3
v <- c(2, 3, 4)^(3:1) ;v # Eleva a potencias 3,2,1
#========================FUNCION length()================================#
#En muchas ocasiones es necesario saber la longitud de una vector. La función
#length() aplicada a un vector regresa precisamente ese valor
u <- 2:33 ; v <- c(4, 5, 6) ;w <- c(u, v);w
length(w)
w <= 10 # Prueba elementos menores o iguales a 10
v <- c(4, 5, 6, 7, 8, 9, 10) * c(1, 2)
## Warning: longitud de objeto mayor no es múltiplo de la longitud de uno menor
v
#to be obtained from site
num_fish=12
anchor_files=c('anchors4.csv','anchors5.csv','anchors6.csv','anchors7.csv',
'anchors8.csv','anchors9.csv','anchors10.csv','anchors11.csv','anchors12.csv')
filenames=c('HG_Ecology.csv','HG_Economics.csv','HG_Ethical.csv',
'HG_Institutional.csv','HG_Social.csv','HG_Technology.csv')
nfield=length(filenames)
print("Starting...")
discipline.names =strsplit(filenames, ".csv")
sustainability=matrix(data=0,nrow=num_fish,ncol=nfield)
n_radar=round(num_fish/10,0)
p1_radar=seq(1,n_radar*10,by=10)
p2_radar=p1_radar
p2_radar[1:(n_radar-1)]=p1_radar[2:n_radar]-1
p2_radar[n_radar]=num_fish
for(i in 1:nfield) {
fisheries.all = loaddata(filenames[i])
n_att=ncol(fisheries.all)
anchors=loaddata(anchor_files[n_att-3])
n_an=nrow(anchors)
colnames(anchors)<-colnames(fisheries.all)
fisheries.dat=fisheries.all[1:num_fish,]
fisheries.raw=rbind(anchors,fisheries.dat)
fisheries.scaled = mdscale(fisheries.raw)
f_images=paste(discipline.names,".jpg",sep="")
jpeg(filename=f_images[i],width=20,height=16,units="cm",res=500)
Res=ifelse(nfield>30,
RAPplot1(fisheries.scaled,num_fish,n_an),
RAPplot2(fisheries.scaled,num_fish,n_an))
mtext(side=3, line=1, discipline.names[i],adj=0)
dev.off()
resfiles=paste("Results_",discipline.names,".csv",sep="")
write.csv(fisheries.scaled[(n_an+1):nrow(fisheries.scaled),],resfiles[i])
sustainability[,i]= fisheries.scaled[(n_an+1):nrow(fisheries.scaled),1]
}
rownames(sustainability)<-rownames(fisheries.dat)
colnames(sustainability)<-discipline.names
#Radar plots
for(i in 1:n_radar) {
f_images=paste("Radar_",seq(1,n_radar),".jpg",sep="")
jpeg(filename=f_images[i],width=20,height=16,units="cm",res=500)
radarplot(sustainability[p1_radar[i]:p2_radar[i],])
dev.off()
}
print("Complete.")
View(sustainability)
View(discipline.names)
#####33###
library(FactoMineR)
temperature <- read.table("http://factominer.free.fr/bookV2/temperature.csv",
header=TRUE,sep=";",dec=".",row.names=1)
source("D:/PROGRAMMING/PROGRAMMING WITH R/Temperature.R")
dat<-data.frame(t=seq(0,2*pi,by=0.1))
xcor<-function(t) 16*sin(t)^3
ycor<-function(t) 13*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=ycor(dat$t)
dat$x=xcor(dat$t)
with(dat,plot(x,y,type="l"))
source("~/.active-rstudio-document")
source("D:/PROGRAMMING/PROGRAMMING WITH R/Temperature.R")
dat<-data.frame(t=seq(0,2*pi,by=0.1))
xcor<-function(t) 16*sin(t)^3
ycor<-function(t) 13*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=ycor(dat$t)
dat$x=xcor(dat$t)
with(dat,plot(x,y,type="l"))
with(dat,polygon(x,y,col="red",lwd=3,lty = 3))
points(c(10,-10,-15,15),c(-10,-10,10,10),pch=169,font=5,cex=5,col="purple")
text(0,0,"TE QUIERO",col='white',cex = 2.5)
#####33###
library(FactoMineR)
temperature <- read.table("http://factominer.free.fr/bookV2/temperature.csv",
header=TRUE,sep=";",dec=".",row.names=1)
res.pca <- PCA(temperature[1:23,],scale.unit=TRUE,ncp=Inf,
graph=FALSE,quanti.sup=13:16,quali.sup=17)
##############################
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(lm.D9, las = 1)      # Residuals, Fitted, ...
par(opar)
######
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
set.seed(123)
set.seed(123)
x <- rnorm(100, 10, 2)
y <- 0.78*x + rnorm(100, 0, 1)
# Crear un data frame con los datos
datos <- data.frame(x, y)
datos
# Ajustar el modelo de regresión lineal simple
modelo <- lm(y ~ x, data = datos)
summary(modelo)
library(tensorflow)
library(keras)
# Cargar el dataset MNIST
mnist <- dataset_mnist()
a <- to_categorical(c(0, 1, 2, 3), num_classes=4)
View(mnist)
??to_categorical
a <- keras::to_categorical(c(0, 1, 2, 3), num_classes=4)
a <- keras3::to_categorical(c(0, 1, 2, 3), num_classes=4)
a
library(keras3)
library(tensorflow)
library(keras)
library(dplyr)
library(keras3)
# Cargar la funciones auxiliares
source("tutorial_functions.R")
setwd("C:\Users\EQUIPO\Documents\GitHub\ohw-tutorials\deep-learning")
setwd("C:/Users/EQUIPO/Documents/GitHub/ohw-tutorials/deep-learning")
library(tensorflow)
library(keras)
library(dplyr)
library(keras3)
# Cargar la funciones auxiliares
source("tutorial_functions.R")
# Leer archivo csv
raw_data <- readr::read_csv("tutorial_data_test.csv")
head(raw_data)
View(raw_data)
# Transformación logaritmica
raw_data <- raw_data %>%
log_inputs(vars = c("t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "t10", "t11", "t12"))
#Generate images from data
image_list <- make_image_list(raw_data,
tox_levels =     c(0,10,30,80),
forecast_steps = 1,
n_steps =        2,
minimum_gap =    4,
maximum_gap =    10,
toxins =         c("t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "t10", "t11", "t12"),
environmentals = c("sst_cum"))
#Splits image_list by year for grouping into train/test data
years <- sapply(image_list, function(x) {return(x$year)})
#image_list <- split(image_list,as.factor(years))
image_list <- split(image_list, years)
#configuration
YEARS_TRAINING <-   c("2014", "2016", "2017")
YEARS_TESTING <-    "2015"
a <- keras3::to_categorical(c(0, 1, 2, 3), num_classes=4)
print(a)
# Cargar la funciones auxiliares
source("tutorial_functions.R")
#Make a training set
train <- pool_images_and_labels(image_list[YEARS_TRAINING], num_classes = 4)
#Make a test set
test <- pool_images_and_labels(image_list[YEARS_TESTING], num_classes = 4)
#Make a test set
test <- pool_images_and_labels(image_list[YEARS_TESTING], num_classes = 4)
model <- keras::keras_model_sequential() %>%
keras::layer_dense(units=64,
activation = "relu",
input_shape = dim(train$image)[2],
name = "input_layer") %>%
keras::layer_dropout(rate = 0.4,
name = "dropout_1") %>%
keras::layer_dense(units=32,
activation = "relu",
name = "hidden_1") %>%
keras::layer_dropout(rate=0.3,
name = "dropout_2") %>%
keras::layer_dense(units=16,
activation = "relu",
name = "hidden_2") %>%
keras::layer_dropout(rate=0.2,
name = "dropout_3") %>%
keras::layer_dense(units = 4,
activation = "softmax",
name = "output")
reticulate::py_last_error()
reticulate::py_last_error()$r_trace$full_call
#-----
model <- keras3::keras_model_sequential() %>%
keras3::layer_dense(units=64,
activation = "relu",
input_shape = dim(train$image)[2],
name = "input_layer") %>%
keras3::layer_dropout(rate = 0.4,
name = "dropout_1") %>%
keras3::layer_dense(units=32,
activation = "relu",
name = "hidden_1") %>%
keras3::layer_dropout(rate=0.3,
name = "dropout_2") %>%
keras3::layer_dense(units=16,
activation = "relu",
name = "hidden_2") %>%
keras3::layer_dropout(rate=0.2,
name = "dropout_3") %>%
keras3::layer_dense(units = 4,
activation = "softmax",
name = "output")
summary(model)
str(train)
head(train$labels)
model %>% keras::compile(optimizer =  "adam",
loss =       "categorical_crossentropy",
metrics =    "categorical_accuracy")
history <- model %>%
keras::fit(x = train$image,
y = train$labels,
batch_size = 128,
epochs = 32,
verbose=1,
validation_split = 0.2,
shuffle = TRUE)
history <- model %>%
keras3::fit(x = train$image,
y = train$labels,
batch_size = 128,
epochs = 32,
verbose=1,
validation_split = 0.2,
shuffle = TRUE)
plot(history)
plot(history)
history <- model %>%
keras3::fit(x = train$image,
y = train$labels,
batch_size = 128,
epochs = 32,
verbose=1,
validation_split = 0.2,
shuffle = TRUE)
reticulate::py_last_error()
plot(history)
model %>% keras3::compile(optimizer =  "adam",
loss =       "categorical_crossentropy",
metrics =    "categorical_accuracy")
history <- model %>%
keras3::fit(x = train$image,
y = train$labels,
batch_size = 128,
epochs = 32,
verbose=1,
validation_split = 0.2,
shuffle = TRUE)
plot(history)
